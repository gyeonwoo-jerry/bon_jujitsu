plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'war' // 추가
}

group = 'bon'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'


    // json
    implementation 'org.json:json:20230227'

    // Password encoder
    implementation 'at.favre.lib:bcrypt:0.10.2'

    // JWT 라이브러리
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // JSON 처리용

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

    // MySQL Connector
    runtimeOnly 'com.mysql:mysql-connector-j'

    // faker
    implementation 'net.datafaker:datafaker:2.0.2'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat' //

    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    tasks.withType(Test).configureEach {
        enabled = false
    }
}

def frontendDir = "$projectDir/src/main/frontend"

sourceSets {
	main {
		resources { srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install' }
	else {
		commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
	}
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
    	// -Dspring.profiles.active 값 가져오기 (기본값: "dev")
	def profile = System.getProperty("spring.profiles.active", "dev")
	// OS에 따른 명령어 설정
    // OS에 따른 명령어 설정
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        if (profile == "prod") {
            commandLine "cmd", "/c", "set NODE_ENV=production && npm run build:prod"
        } else {
            commandLine "cmd", "/c", "set NODE_ENV=development && npm run build:dev"
        }
    } else {
        if (profile == "prod") {
            commandLine "sh", "-c", "NODE_ENV=production npm run build:prod"
        } else {
            commandLine "sh", "-c", "NODE_ENV=development npm run build:dev"
        }
    }

        // 표준 출력과 오류 출력을 확인할 수 있도록 설정
    standardOutput = System.out
    errorOutput = System.err
    ignoreExitValue = true  // 명령이 실패해도 계속 진행하도록 설정
    
}

task copyReactBuildFiles(type: Copy) {
	dependsOn "buildReact"
	from "$frontendDir/build"
	into "$projectDir/src/main/resources/static"
}